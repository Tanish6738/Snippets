# Snippets - Code Snippet Management System

A full-stack application for managing and sharing code snippets with team collaboration features.

## Features

- User authentication and authorization
- Code snippet creation and management
- Directory organization
- Group collaboration
- Sharing and permission management
- Version history tracking
- Syntax highlighting
- Real-time collaboration
- Activity logging

## Tech Stack

- **Frontend**: React, Vite, TailwindCSS
- **Backend**: Node.js, Express.js
- **Database**: MongoDB
- **Authentication**: JWT

## Project Structure

```
snippets/
├── Backend/
│   ├── Config/
│   ├── controllers/
│   ├── middlewares/
│   ├── Models/
│   └── Routes/
└── Frontend/
    ├── src/
    │   ├── Components/
    │   ├── Config/
    │   ├── Context/
    │   ├── Routes/
    │   └── Services/
    └── public/
```

## Getting Started

### Prerequisites

- Node.js >= 14
- MongoDB >= 4.4
- npm or yarn

### Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/snippets.git
cd snippets
```

2. Install Backend dependencies:
```bash
cd Backend
npm install
```

3. Install Frontend dependencies:
```bash
cd Frontend
npm install
```

4. Create a `.env` file in the Backend directory using the provided template:
```properties
PORT=3000
NODE_ENV=development
MONGO_URI=mongodb://localhost:27017/Snippets
JWT_SECRET=your-secret-key
```

5. Start the development servers:

Backend:
```bash
cd Backend
npm run dev
```

Frontend:
```bash
cd Frontend
npm run dev
```

## API Documentation

Base URL: `http://localhost:3000/api`

### Authentication

Most endpoints require JWT token in the Authorization header:
```http
Authorization: Bearer <token>
```

### Error Responses
All error responses follow the format:
```json
{
    "status": "error",
    "error": "Error Type",
    "message": "Detailed error message",
    "details": [] // Optional array of specific error details
}
```

### User Routes

#### Register New User
```http
POST /api/users/register
Content-Type: application/json

{
    "username": "testuser",
    "email": "test@example.com",
    "password": "Password123"
}
```

#### Login User
```http
POST /api/users/login
Content-Type: application/json

{
    "email": "test@example.com",
    "password": "Password123"
}
```

#### Get User Profile
```http 
GET /api/users/profile
Authorization: Bearer <token>
```

#### Update User Profile
```http
PATCH /api/users/profile
Authorization: Bearer <token>
Content-Type: application/json

{
    "username": "updateduser",
    "bio": "This is my updated bio",
    "preferences": {
        "defaultSnippetVisibility": "private",
        "theme": "dark"
    }
}
```

### Snippet Routes

#### Create Snippet
```http
POST /api/snippets
Authorization: Bearer <token>
Content-Type: application/json

{
    "title": "Hello World in JavaScript",
    "content": "console.log('Hello World!');",
    "language": "javascript",
    "tags": ["beginner", "javascript"],
    "visibility": "public",
    "description": "A simple hello world program"
}
```

#### List Snippets
```http
GET /api/snippets
Authorization: Bearer <token>

# Query Parameters:
?page=1
?limit=10
?tags=javascript,react
?language=javascript
?visibility=public
```

#### Get Snippet Details
```http
GET /api/snippets/:id
Authorization: Bearer <token>
```

#### Update Snippet
```http
PATCH /api/snippets/:id
Authorization: Bearer <token>
Content-Type: application/json

{
    "title": "Updated Title",
    "content": "Updated content",
    "tags": ["updated", "tags"]
}
```

#### Delete Snippet
```http
DELETE /api/snippets/:id
Authorization: Bearer <token>
```

#### Share Snippet
```http
POST /api/snippets/:id/share
Authorization: Bearer <token>
Content-Type: application/json

{
    "entityId": "user_or_group_id",
    "entityType": "User", // or "Group"
    "role": "viewer" // or "editor", "owner"
}
```

#### Search Snippets
```http
GET /api/snippets/search
Authorization: Bearer <token>

# Query Parameters:
?q=search_term
?page=1
?limit=10
```

#### Export Snippet
```http
GET /api/snippets/:id/export
Authorization: Bearer <token>
```

#### Toggle Comments
```http
PATCH /api/snippets/:id/comments
Authorization: Bearer <token>
Content-Type: application/json

{
    "enabled": true // or false
}
```

#### Restore Snippet Version
```http
POST /api/snippets/:id/restore/:version
Authorization: Bearer <token>
```

#### Bulk Create Snippets
```http
POST /api/snippets/bulk
Authorization: Bearer <token>
Content-Type: application/json

{
    "snippets": [
        {
            "title": "Snippet 1",
            "content": "Content of snippet 1",
            "language": "javascript",
            "tags": ["tag1", "tag2"],
            "visibility": "public"
        },
        {
            "title": "Snippet 2",
            "content": "Content of snippet 2",
            "language": "python",
            "tags": ["tag3", "tag4"],
            "visibility": "private"
        }
    ]
}
```

#### Get Snippet Statistics
```http
GET /api/snippets/:id/stats
Authorization: Bearer <token>
```

### Directory Routes

#### Create Directory
```http
POST /api/directories
Authorization: Bearer <token>
Content-Type: application/json

{
    "name": "JavaScript Projects",
    "path": "/JavaScript Projects",
    "visibility": "private",
    "parentId": "optional_parent_directory_id"
}
```

#### List Directories
```http
GET /api/directories
Authorization: Bearer <token>
```

#### Get Directory by ID
```http
GET /api/directories/:id
Authorization: Bearer <token>
```

#### Update Directory
```http
PUT /api/directories/:id
Authorization: Bearer <token>
Content-Type: application/json

{
    "name": "Updated Directory Name",
    "visibility": "public"
}
```

#### Delete Directory
```http
DELETE /api/directories/:id
Authorization: Bearer <token>
```

#### Share Directory
```http
POST /api/directories/:id/share
Authorization: Bearer <token>
Content-Type: application/json

{
    "entityId": "user_or_group_id",
    "entityType": "User", // or "Group"
    "role": "viewer" // or "editor", "owner"
}
```

#### Move Directory
```http
PATCH /api/directories/:id/move
Authorization: Bearer <token>
Content-Type: application/json

{
    "newParentId": "new_parent_directory_id"
}
```

#### Rename Directory
```http
PATCH /api/directories/:id/rename
Authorization: Bearer <token>
Content-Type: application/json

{
    "newName": "New Directory Name"
}
```

#### Get Directory Tree
```http
GET /api/directories/tree
Authorization: Bearer <token>
```

### Group Routes

#### Create Group
```http
POST /api/groups
Authorization: Bearer <token>
Content-Type: application/json

{
    "name": "JavaScript Developers",
    "description": "A group for JavaScript enthusiasts",
    "settings": {
        "visibility": "public",
        "joinPolicy": "open"
    }
}
```

#### List Groups
```http
GET /api/groups
Authorization: Bearer <token>
```

#### Get Group Details
```http
GET /api/groups/:id
Authorization: Bearer <token>
```

#### Update Group
```http
PATCH /api/groups/:id
Authorization: Bearer <token>
Content-Type: application/json

{
    "name": "Updated Group Name",
    "description": "Updated description"
}
```

#### Delete Group
```http
DELETE /api/groups/:id
Authorization: Bearer <token>
```

#### Add Group Member
```http
POST /api/groups/:id/members
Authorization: Bearer <token>
Content-Type: application/json

{
    "userId": "user_id",
    "role": "member" // or "admin"
}
```

#### Remove Group Member
```http
DELETE /api/groups/:id/members/:userId
Authorization: Bearer <token>
```

#### Add Snippet to Group
```http
POST /api/groups/:id/snippets
Authorization: Bearer <token>
Content-Type: application/json

{
    "snippetId": "snippet_id"
}
```

#### Remove Snippet from Group
```http
DELETE /api/groups/:id/snippets/:snippetId
Authorization: Bearer <token>
```

#### Add Directory to Group
```http
POST /api/groups/:id/directories
Authorization: Bearer <token>
Content-Type: application/json

{
    "directoryId": "directory_id"
}
```

#### Remove Directory from Group
```http
DELETE /api/groups/:id/directories/:directoryId
Authorization: Bearer <token>
```

### Activity Routes

#### Log Activity
```http
POST /api/activities
Authorization: Bearer <token>
Content-Type: application/json

{
    "action": "create",
    "targetType": "snippet",
    "targetId": "snippet_id",
    "metadata": {
        "previousState": {},
        "newState": {},
        "changes": ["title"],
        "visibility": "public",
        "sharedWith": ["user_id"],
        "exportFormat": "pdf"
    },
    "relatedUsers": ["user_id"]
}
```

#### Get Activities by User
```http
GET /api/activities/user
Authorization: Bearer <token>
```

#### Get Activities by Target
```http
GET /api/activities/target/:targetId
Authorization: Bearer <token>
```

#### Get Activities by Action
```http
GET /api/activities/action/:action
Authorization: Bearer <token>
```

#### Update Activity
```http
PUT /api/activities/:id
Authorization: Bearer <token>
Content-Type: application/json

{
    "action": "edit",
    "metadata": {
        "changes": ["description"]
    }
}
```

#### Delete Activity
```http
DELETE /api/activities/:id
Authorization: Bearer <token>
```

## Development

### Coding Standards

- Follow ESLint configuration
- Write meaningful commit messages
- Document new features and API changes

### Testing

1. Backend Testing:
```bash
cd Backend
npm test
```

2. Frontend Testing:
```bash
cd Frontend
npm test
```

## Contributing

1. Fork the repository
2. Create your feature branch
3. Commit your changes
4. Push to the branch
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.
